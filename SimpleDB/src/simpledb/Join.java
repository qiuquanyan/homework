package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {

    private final JoinPredicate p_;
    private DbIterator child_1;
    private DbIterator child_2;

    private Tuple tuple_1;
    private Tuple tuple_2;
	/**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p_=p;
    	this.child_1=child1;
    	this.child_2=child2;
    	this.tuple_1=null;
    	this.tuple_2=null;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	return TupleDesc.combine(this.child_1.getTupleDesc(),this.child_2.getTupleDesc());
    	
        //return s;
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        // some code goes here
    	super.open();
    	this.child_1.open();
    	this.child_2.open();
    	if(child_1.hasNext())
    		tuple_1=child_1.next();
    	if(child_2.hasNext())
    		tuple_2=child_2.next();
    }

    public void close() {
        // some code goes here
    	this.child_1.close();
    	this.child_2.close();
    	super.close();
    	tuple_1=null;
    	tuple_2=null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.close();
    	this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    /*
    private Tuple sorts(Tuple t) {
    	int pos1,pos2;
    	switch(this.p_.getop()) {
    	case EQUALS:
    		pos1 = pos2=0;
    		
    	case LESS_THAN:
    	case LESS_THAN_OR_EQ:
    		
    	case GREATER_THAN:
    	case GREATER_THAN_OR_EQ:
    		
    	}
    }*/
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	//there is a cycle to find the filter tuple with JoinPredicate
    	while(tuple_1!=null || tuple_2!=null) {
    		
    		Tuple nextT=null;
    		int num_field1=tuple_1.getTupleDesc().numFields();
    		if(this.p_.filter(tuple_1, tuple_2)) {
    			nextT=new Tuple(this.getTupleDesc());
    			for(int i=0;i<this.getTupleDesc().numFields();i++) {
    				//
    				if(i<num_field1) {
    					nextT.setField(i, tuple_1.getField(i));
    				}
    				else {
    					nextT.setField(i, tuple_2.getField(i-num_field1));
    				}
    			}
    		}
    		if(child_2.hasNext()) {
    			tuple_2=child_2.next();
    		}
    		else {
    			if(child_1.hasNext()) {
    				tuple_1=child_1.next();
    				child_2.rewind();
    				if(child_2.hasNext()) {
    					tuple_2=child_2.next();
    				}
    			}
    			else {
    				tuple_1=null;
    				tuple_2=null;
    			}
    		}
    		
    		if(nextT!=null) {
    			//Tuple sorts_one=sorts(nextT);
    			return nextT;
    		}
    	}//the cycle is over,and not found the adaptable one
        return null;
    }
}
